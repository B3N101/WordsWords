datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role            Role              @default(STUDENT)
  Class           Class?            @relation(fields: [classClassId], references: [classId])
  classClassId    String?
  PublishedList   PublishedList[]
  wordMasteries   WordMastery[]
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Word {
  wordId               String        @id @default(cuid())
  word                 String
  partOfSpeech         partOfSpeech
  context              String
  definition           String
  incorrectDefinitions String[]
  listId               String
  WordsList            WordsList?    @relation(fields: [listId], references: [listId])
  WordMastery          WordMastery[]
}

enum partOfSpeech {
  Noun
  Verb
  Adjective
  Adverb
}

model WordsList {
  listId        String          @id @default(cuid())
  words         Word[]
  PublishedList PublishedList[]
}

model Class {
  classId             String          @id @default(cuid())
  className           String
  teacherId           String
  students            User[]
  publishedWordsLists PublishedList[]
  SemesterStart       DateTime
  SemesterEnd         DateTime
}

model PublishedList {
  publishedListId String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  startDate       DateTime
  endDate         DateTime

  list   WordsList @relation(fields: [listId], references: [listId])
  listId String

  class   Class  @relation(fields: [classId], references: [classId])
  classId String

  timeGoal    Int
  masteryGoal Int
  timeSpent   Int
  isDone      Boolean @default(false)
  Score       Float?
}

model WordMastery {
  wordId       String            @id
  word         Word              @relation(fields: [wordId], references: [wordId])
  masteryScore Float?
  attempts     QuestionAttempt[]
  user         User              @relation(fields: [userId], references: [id])
  userId       String
}

model QuestionAttempt {
  questionAttemptId String      @id @default(cuid())
  wordId            String
  userId            String
  wordMastery       WordMastery @relation(fields: [wordId], references: [wordId])
  correct           Boolean
  timeSpent         Int
  questionAttempt   DateTime    @default(now())
}