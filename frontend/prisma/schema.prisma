datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH MODELS
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// OUR MODELS
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role          Role              @default(STUDENT)
  // Class         Class?          @relation(fields: [classClassId], references: [classId])
  // classClassId  String?
  // _____________ UPDATE _______________
  // Changed relationship to many to many
  Classes       Class[]           @relation("UserClasses")
  PublishedList PublishedList[]
  wordMasteries UserWordMastery[]

  QuizProgress          UserQuizProgress[]
  QuestionProgress      UserQuestionProgress[]
  UserWordsListProgress UserWordsListProgress[]
}

model Class {
  classId             String          @id @default(cuid())
  className           String
  teacherId           String
  students            User[]          @relation("UserClasses")
  publishedWordsLists PublishedList[]
  SemesterStart       DateTime
  SemesterEnd         DateTime
}

model Word {
  wordId               String       @id @default(cuid())
  word                 String
  partOfSpeech         partOfSpeech
  gradeLevel           Grade
  exampleSentence      String
  context              String
  definition           String
  incorrectDefinitions String[]
  listId               String? //TODO: remove optional when seeding is complete
  WordsList            WordsList?   @relation(fields: [listId], references: [listId])
  // TODO: implement wordmastery seeding. Uncomment when complete
  // WordMastery          WordMastery[]
  questions            Question[]

  rankWithinList Int?
  wordList       Int?

  quizzes           Quiz[]
  userWordMasteries UserWordMastery[]
}

model WordsList {
  listId                String                  @id @default(cuid())
  words                 Word[]
  PublishedList         PublishedList[]
  quizzes               Quiz[]
  UserWordsListProgress UserWordsListProgress[]
}

model UserWordsListProgress {
  userWordsListProgressId String @id @default(cuid())
  user                    User   @relation(fields: [userId], references: [id])
  userId                  String

  wordsList       WordsList @relation(fields: [wordsListListId], references: [listId])
  wordsListListId String

  userQuizProgress UserQuizProgress[]
}

model PublishedList {
  publishedListId String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  startDate       DateTime
  endDate         DateTime

  list   WordsList @relation(fields: [listId], references: [listId])
  listId String

  class   Class?  @relation(fields: [classId], references: [classId])
  classId String?

  timeGoal    Int?
  masteryGoal Int?
  timeSpent   Int?
  isDone      Boolean @default(false)
  Score       Float?
}

model UserWordMastery {
  wordId String @id
  word   Word   @relation(fields: [wordId], references: [wordId])

  masteryScore Float

  attempts UserQuestionAttempt[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model UserQuestionAttempt {
  questionAttemptId String          @id @default(cuid())
  wordId            String
  userId            String
  wordMastery       UserWordMastery @relation(fields: [wordId], references: [wordId])
  correct           Boolean
  timeSpent         Int?
  questionAttempt   DateTime        @default(now())
}

model Quiz {
  quizId         String   @id @default(cuid())
  wordListNumber Int?
  quizType       QuizType @default(MINI)

  questions        Question[]
  words            Word[]
  UserQuizProgress UserQuizProgress[]

  WordsList       WordsList? @relation(fields: [wordsListListId], references: [listId])
  wordsListListId String?
}

model UserQuizProgress {
  userQuizProgressId String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  quiz       Quiz   @relation(fields: [quizQuizId], references: [quizId], onDelete: Cascade)
  quizQuizId String

  wordListProgress   UserWordsListProgress @relation(fields: [wordListProgressId], references: [userWordsListProgressId])
  wordListProgressId String

  learnCompleted Boolean @default(false)
  completed      Boolean
  score          Float
  randomSeed     Int
}

model Question {
  questionId String @id @default(cuid())
  question   String
  rank       Int

  wordId String
  word   Word   @relation(fields: [wordId], references: [wordId])

  quiz                 Quiz?                  @relation(fields: [quizQuizId], references: [quizId])
  quizQuizId           String?
  answers              Answer[]
  userQuestionProgress UserQuestionProgress[]
}

model UserQuestionProgress {
  userQuestionProgressId String @id @default(cuid())
  user                   User   @relation(fields: [userId], references: [id])
  userId                 String

  question           Question @relation(fields: [questionQuestionId], references: [questionId], onDelete: Cascade)
  questionQuestionId String

  completed Boolean
}

model Answer {
  answerId   String   @id @default(cuid())
  answerText String
  question   Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String
  correct    Boolean
}

// ENUMS - ROLE, GRADE, PART OF SPEECH
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Grade {
  NINE
  TEN
  ELEVEN
}

enum partOfSpeech {
  Noun
  Verb
  Adjective
}

enum QuizType {
  MINI
  MASTERY
}
