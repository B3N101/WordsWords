generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role          Role              @default(STUDENT)
  Classes       Class[]           @relation("UserClasses")
  wordMasteries UserWordMastery[]

  quizzes Quiz[]

  UserWordsListProgress UserWordsListProgress[]
}

model Class {
  classId                 String                  @id @default(cuid())
  className               String
  teacherId               String
  gradeLevel              Grade
  SemesterStart           DateTime
  SemesterEnd             DateTime
  userWordsListProgresses UserWordsListProgress[]
  students                User[]                  @relation("UserClasses")
}

model Word {
  wordId               String           @id @default(cuid())
  word                 String
  partOfSpeech         partOfSpeech
  gradeLevel           Grade
  context              String
  definition           String
  incorrectDefinitions String[]
  exampleSentence      String
  correctFillIn        String
  incorrectFillIns     String[]
  wordListNumber       Int?
  rankWithinList       Int?
  listId               String?
  audioSrc             String?
  questions            Question[]
  userWordMasteries    UserWordMastery[]
  wordsList            WordsList?       @relation(fields: [listId], references: [listId], onDelete: Cascade)
}

model WordsList {
  listId                String                  @id @default(cuid())
  name                  String
  listNumber            Int?
  quizzes               Quiz[]
  UserWordsListProgress UserWordsListProgress[]
  words                 Word[]
}

model UserWordsListProgress {
  userId                String
  classId               String
  wordsListListId       String
  quizAttemptsRemaining Int[]             @default([3, 3, 3, 1])
  retakesRequested      Boolean[]         @default([false, false, false, false])
  completed             Boolean           @default(false)
  dueDate               DateTime          @default(dbgenerated("(now() + '7 days'::interval)"))
  quizzes               Quiz[]
  userWordMasteries     UserWordMastery[]
  class                 Class             @relation(fields: [classId], references: [classId], onDelete: Cascade)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  wordsList             WordsList         @relation(fields: [wordsListListId], references: [listId], onDelete: Cascade)

  @@id([userId, wordsListListId], name: "userWordsListProgressId")
}

model UserWordMastery {
  @@id([userId, wordId], name: "userWordMasteryId")
  wordId                String                
  wordsListId           String
  masteryScore          Float                 @default(0)
  userId                String
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userWordsListProgress UserWordsListProgress @relation(fields: [userId, wordsListId], references: [userId, wordsListListId], onDelete: Cascade)
  word                  Word                  @relation(fields: [wordId], references: [wordId], onDelete: Cascade)
}

model Quiz {
  quizId                String                @id @default(cuid())
  quizType              QuizType              @default(MINI)
  name                  String
  userId                String
  wordsListId           String
  completed             Boolean               @default(false)
  score                 Float                 @default(0)
  dueDate               DateTime?
  createdAt             DateTime              @default(now())
  miniSetNumber         Int
  learnCompleted        Boolean               @default(false)
  length                Int
  completedAt           DateTime?
  questions             Question[]
  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userWordsListProgress UserWordsListProgress @relation(fields: [userId, wordsListId], references: [userId, wordsListListId], onDelete: Cascade)
  wordsList             WordsList             @relation(fields: [wordsListId], references: [listId], onDelete: Cascade)
}

model Question {
  questionId        String   @id @default(cuid())
  questionString    String
  rank              Int
  quizId            String
  wordId            String
  allAnswers        String[]
  correctAnswer     String
  completed         Boolean  @default(false)
  correctlyAnswered Boolean  @default(false)
  quiz              Quiz     @relation(fields: [quizId], references: [quizId], onDelete: Cascade)
  word              Word     @relation(fields: [wordId], references: [wordId], onDelete: Cascade)
}

model RoleRequest {
  userId String @unique
  role Role
  requestDate DateTime @default(now())
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Grade {
  NINE
  TEN
  ELEVEN
}

enum partOfSpeech {
  Noun
  Verb
  Adjective
}

enum QuizType {
  MINI
  MASTERY
}
